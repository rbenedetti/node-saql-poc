/*
 * SETUP
 * Install node.js (https://nodejs.org/en/download/)
 * > Validate node.js: node --version
 * > Validate npm: npm --version
 */
/*
 * SETUP
 * npm install dotenv
 * > zero-dependency module that loads environment variables from a local .env file into process.env. 
 * > When running on Heroku, process.env calls would draw from the Config Vars vs the local .env file. 
 * > Storing config in the environment separate from code is based on The Twelve-Factor App methodology. 
 */
require('dotenv').config();
/*
 * SETUP
 * npm install express
 * > Fast, unopinionated, minimalist web framework for Node.js
 */
var express = require('express');
/*
 * SETUP
 * npm install cookie-session
 * > Simple cookie-based session middleware for storing session on the clienet side (vs express-session on the server side)
 */
var cookieSession = require('cookie-session');
/*
 * SETUP
 * npm install salesforce-oauth2
 * > Lightweight implementation of the OAuth2 Web Server Authentication Flow for Salesforce for Node.js
 */
var oauth2 = require('salesforce-oauth2');
/*
 * SETUP
 * npm install axios
 * > Promise based HTTP client for the browser and node.js
 * >> Make XMLHttpRequests from the browser
 * >> Make http requests from node.js [i.e. to the Einstein Analytics API]
 * >> Supports the Promise API
 * >> Intercept request and response
 * >> Transform request and response data
 * >> Cancel requests
 * >> Automatic transforms for JSON data
 * >> Client side support for protecting against XSRF
 */
var axios = require('axios');
/*
 * SETUP
 * npm install body-parser
 * > [RMB: Add Description]
 */
var bodyParser = require('body-parser');
/*
 * SETUP
 * Create a Connected App on Salesforce
 * Go to Setup > Apps > App Manager
 * Select 'New Connected App'
 * Enter
 * > Connected App Name: <name>
 * > API Name: <auto-generated from name>
 * > Email
 * Select Enable OAuth Settings
 * Enter Callback URL: <Heroku URL, e.g. https://<Heroku App Name>.herokuapp.com, and/or http://localhost:<port>)
 * Select Selected OAuth Scope: Full access (full)
 * > You can review the complete list of scopes here:
 * > https://help.salesforce.com/articleView?id=remoteaccess_oauth_scopes.htm
 * Select 'Save'
 * (The next screen shows Client Secret and Client Id)
 */
var consumerKey = process.env.SF_CLIENT_ID;
var consumerSecret = process.env.SF_CLIENT_SECRET;
var callbackUrl = process.env.SF_CALLBACK_URL;
console.log(`SF_CLIENT_ID ${consumerKey} \n SF_CLIENT_SECRET=${consumerSecret} \n SF_CALLBACK_URL=${callbackUrl}`)

var app = express();
app.set('port', process.env.PORT || 3000);

/*
 * Setup Middleware
 */
app.use(express.static('public'));
app.use(bodyParser.urlencoded());
app.use(
    cookieSession({
        name: 'session',
        secret: "82df9b3d56044ef5b17a2803c81e0700",
        maxAge: 24 * 60 * 60 * 1000 // 24hrs
      })
);

/*
 * Handle App Access [app.get("/", init);]
 */
init = function (request, response) {
    request.session.loginUrl=request.query.loginUrl;
    var uri = oauth2.getAuthorizationUrl({
        redirect_uri: callbackUrl,
        client_id: consumerKey,
        /*
         * The 'scope' parameter has to match the configured scope in the Salesforce connected app
         * You can review the complete list of scopes here:
         * https://help.salesforce.com/articleView?id=remoteaccess_oauth_scopes.htm
         */
        scope: 'full', 
        /*
         * Default base_url is https://login.salesforce.com
         * Can set to sandbox via https://test.salesforce.com
         */
        base_url: 'https://test.salesforce.com'
        // base_url: request.query.loginUrl
    });
    console.log(`Redirect URL : ${uri}`)
    return response.redirect(uri);
};

/*
 * Handle OAuth Callack [app.get('/oauth/callback', oauthCallback);]
 */
oauthCallback = function (request, response) {
    var authorizationCode = request.param('code');
    var loginUrl = request.session.loginUrl;
    oauth2.authenticate({
        redirect_uri: callbackUrl,
        client_id: consumerKey,
        client_secret: consumerSecret,
        code: authorizationCode,
        base_url: 'https://test.salesforce.com' // [RMB: This was: base_url: loginUrl]
    }, function (error, payload) {
        //console.log('Payload:' + JSON.stringify(payload));
        if (payload) {
            //console.log(JSON.stringify(payload,'\n',4))
            request.session.access_token=payload.access_token;
            request.session.instance_url=payload.instance_url;
            return response.redirect('https://unilypoc.herokuapp.com/saql.html'); // New
/*            response.send('Authenticated.');
            response.send('Use /saql?q=<SAQL Query> to submit smaller SAQL queries');
            response.send('Or <a href=https://unilypoc.herokuapp.com/saql.html>post</a> larger SAQL queries.');
*/
        } else {
            console.log('Empty Payload');
            response.send('Empty Payload. Try Again.');
        }
    });
};

/*
 * Handle the GET-based SAQL submission [app.get("/saql", runSAQL);]
 */
runSAQL = async function (request,response){
    /*
     * Example Query Parameter:
     * q = load "0Fb460000008RzyCAE/0Fc460000009TdnCAE";q = group q by all;q = foreach q generate count() as 'count';q = limit q 2000;
     */
    let saqlQry = request.query.q;
    if(!saqlQry){
        response.send('ERROR: Query parameter q with the SAQL query is required.');
    }else{
        let saqlReqBody = {
            "query": saqlQry
        }
        /*
         * Example saqlReqBody:
         * saqlReqBody = {
         *     "query": "q = load \"0Fb460000008RzyCAE/0Fc460000009TdnCAE\";" +
         *              "q = group q by all;q = foreach q generate count() as 'count';" +
         *              "q = limit q 2000;"
         * }
        */
        let saqlUrl = request.session.instance_url+'/services/data/v45.0/wave/query';
        try{
            let saqlResponse = await axios.post(saqlUrl,saqlReqBody,{
                headers: {
                    "Authorization": "OAuth " + request.session.access_token
                }
            });
            response.send(saqlResponse.data);
        }catch(error){
            response.send(JSON.stringify(error.response.data));
        }
    }
}

/*
 * Handle the POST-based SAQL submission [app.get("/saql", runSAQL);]
 */
runSAQLPost = async function (request,response){
    let saqlQry  =request.body.saqlQuery;
    saqlQry = saqlQry.trim();
    if(!saqlQry){
        response.send('Parameter q is required with the SAQL query to execute');
    }else{
        let saqlReqBody = {
            "query": saqlQry
        }

        let saqlUrl = request.session.instance_url+'/services/data/v45.0/wave/query';
        try{
            let saqlResponse = await axios.post(saqlUrl,saqlReqBody,{
                headers: {
                    "Authorization": "OAuth " + request.session.access_token
                }
            });
            response.send(saqlResponse.data);
        }catch(error){
            response.send(JSON.stringify(error.response.data));
        }
    }
}

/*
 * Setup the end-points (and methods) that this app will respond to
 */
app.get("/", init);
app.get('/oauth/callback', oauthCallback);
app.get("/saql", runSAQL);
app.post('/saql',runSAQLPost);

/*
 * Listen to HTTP Requests
 * > When running locally, it will be port 3000
 * > When running on Heroku, the port will be defined by Heroku
 */
var server = app.listen(app.get('port'), function() {
  var host = server.address().address;
  var port = server.address().port;
  console.log('mData listening at http://%s:%s', host, port);
});